{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johan/Desktop/kickstart/pages/campaigns/requests/index.js\";\nimport React, { Component } from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport Layout from '../../components/Layout';\nimport { Link } from '../../../routes';\nimport Campaign from '../../../ethereum/campaign';\nimport RequestRow from '../../components/RequestRow'; // export const getServerSideProps = async (context) => {\n//   const address = context.query.address\n//   // query the data based on the address and return as props\n//   // const accounts = await web3.eth.getAccounts()\n//   const campaign = Campaign(address)\n//   const requestCount = await campaign.methods.getRequestsCount().call()\n//   //index of 1 - > iterate\n//   //array.fill -> gives a list of all indicies\n//   const requests = await Promise.all(\n//     Array(parseInt(requestCount))\n//       .fill()\n//       .map((element, index) => {\n//         return campaign.methods.requests(index).call()\n//       }),\n//   )\n//   let { description, value, recipient, approvalCount } = requests[0]\n//   // console.log(requests)\n//   // let reqke = requests[0]\n//   return {\n//     props: {\n//       address,\n//       description,\n//       value,\n//       recipient,\n//       approvalCount,\n//       requestCount,\n//       requests,\n//     },\n//   }\n// }\n\nexport default class Requests extends Component {\n  static async getInitialProps(props) {\n    const {\n      address\n    } = props.query;\n    const campaign = Campaign(address);\n    const requestCount = await campaign.methods.getRequestCount().call(); //iterate every individual request\n    //issue one call wait to resolve with promise\n\n    const requests = await Promise.all(Array(parseInt(requestCount)).fill().map((request, index) => {\n      return campaign.methods.requests(index).call();\n    }));\n    console.log(requests); //pass/add requests list of requests to object\n\n    return {\n      address,\n      requests,\n      requestCount\n    };\n  }\n\n  renderRow() {\n    this.props.requests.map((request, index) => {\n      return /*#__PURE__*/_jsxDEV(RequestRow, {\n        request: request,\n        address: this.props.address\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  render() {\n    const {\n      HeaderCell,\n      Row,\n      HeaderCellCell,\n      Body\n    } = Table; // console.log(this.props.description)\n\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" Requests \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 41\n          }, this), /*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"Recipient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"Approval Count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"Approve \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(HeaderCell, {\n            children: \"Finalize \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Body, {\n          children: this.renderRow()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        route: `/campaigns/${this.props.address}/requests/new`,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            labelPosition: \"left\",\n            content: \"New Request\",\n            icon: \"add\",\n            primary: true,\n            floated: \"right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/johan/Desktop/kickstart/pages/campaigns/requests/index.js"],"names":["React","Component","Button","Table","Layout","Link","Campaign","RequestRow","Requests","getInitialProps","props","address","query","campaign","requestCount","methods","getRequestCount","call","requests","Promise","all","Array","parseInt","fill","map","request","index","console","log","renderRow","render","HeaderCell","Row","HeaderCellCell","Body"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Table } from 'semantic-ui-react'\nimport Layout from '../../components/Layout'\nimport { Link } from '../../../routes'\nimport Campaign from '../../../ethereum/campaign'\nimport RequestRow from '../../components/RequestRow'\n// export const getServerSideProps = async (context) => {\n//   const address = context.query.address\n//   // query the data based on the address and return as props\n//   // const accounts = await web3.eth.getAccounts()\n\n//   const campaign = Campaign(address)\n//   const requestCount = await campaign.methods.getRequestsCount().call()\n\n//   //index of 1 - > iterate\n//   //array.fill -> gives a list of all indicies\n//   const requests = await Promise.all(\n//     Array(parseInt(requestCount))\n//       .fill()\n//       .map((element, index) => {\n//         return campaign.methods.requests(index).call()\n//       }),\n//   )\n//   let { description, value, recipient, approvalCount } = requests[0]\n//   // console.log(requests)\n//   // let reqke = requests[0]\n\n//   return {\n//     props: {\n//       address,\n//       description,\n//       value,\n//       recipient,\n//       approvalCount,\n//       requestCount,\n//       requests,\n//     },\n//   }\n// }\n\nexport default class Requests extends Component {\n  static async getInitialProps(props) {\n    const { address } = props.query\n    const campaign = Campaign(address)\n\n    const requestCount = await campaign.methods.getRequestCount().call()\n\n    //iterate every individual request\n    //issue one call wait to resolve with promise\n\n    const requests = await Promise.all(\n      Array(parseInt(requestCount))\n        .fill()\n        .map((request, index) => {\n          return campaign.methods.requests(index).call()\n        }),\n    )\n\n    console.log(requests)\n\n    //pass/add requests list of requests to object\n    return { address, requests, requestCount }\n  }\n\n  renderRow() {\n    this.props.requests.map((request, index) => {\n      return (\n        <RequestRow\n          key={index}\n          request={request}\n          address={this.props.address}\n        ></RequestRow>\n      )\n    })\n  }\n\n  render() {\n    const { HeaderCell, Row, HeaderCellCell, Body } = Table\n    // console.log(this.props.description)\n    return (\n      <Layout>\n        <h3> Requests </h3>\n\n        <Table>\n          <Row>\n            <HeaderCell>ID</HeaderCell> <HeaderCell>Description</HeaderCell>\n            <HeaderCell>Amount</HeaderCell> <HeaderCell>Recipient</HeaderCell>\n            <HeaderCell>Approval Count</HeaderCell>\n            <HeaderCell>Approve </HeaderCell> <HeaderCell>Finalize </HeaderCell>\n          </Row>\n\n          <Body>{this.renderRow()}</Body>\n        </Table>\n        <Link route={`/campaigns/${this.props.address}/requests/new`}>\n          <a>\n            <Button\n              labelPosition=\"left\"\n              content=\"New Request\"\n              icon=\"add\"\n              primary\n              floated=\"right\"\n            />\n          </a>\n        </Link>\n      </Layout>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}