{"ast":null,"code":"import React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Card } from 'semantic-ui-react';\nexport var __N_SSP = true;\nexport default function CampaignShow() {\n  var _this$props = this.props,\n      campaignAddress = _this$props.campaignAddress,\n      minimumContribution = _this$props.minimumContribution,\n      balance = _this$props.balance,\n      requestCount = _this$props.requestCount,\n      approversCount = _this$props.approversCount,\n      manager = _this$props.manager;\n} // export default class CampaignShow extends Component {\n//   constructor(props) {\n//     super(props)\n//   }\n//   renderCards() {\n//     const items = [\n//       {\n//         header: manager,\n//         meta: 'Address of Manager',\n//         description:\n//           'The manager created this campaign and can create spending/withdraw requests',\n//       },\n//       {\n//         header: minimumContribution,\n//         meta: 'Minimum contribution to the campaign',\n//       },\n//     ]\n//     return <Card.Group items={items} />\n//   }\n//   render() {\n//     return (\n//       <Layout>\n//         <h1>{this.campaignAddress} </h1>\n//         {/* Campaign Minimum: {minimumContribution}\n//         Balance: {balance}\n//         Requests: {requestCount}\n//         Approvers: {approversCount}\n//         Manager: {manager} */}\n//         {this.renderCards()}\n//       </Layout>\n//     )\n//   }\n// }\n\n_c = CampaignShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"CampaignShow\");","map":{"version":3,"sources":["/Users/johan/Desktop/kickstart/pages/campaigns/show.js"],"names":["React","Component","Layout","Card","CampaignShow","props","campaignAddress","minimumContribution","balance","requestCount","approversCount","manager"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAASC,IAAT,QAAqB,mBAArB;;AAsBA,eAAe,SAASC,YAAT,GAAwB;AAAA,oBAQjC,KAAKC,KAR4B;AAAA,MAEnCC,eAFmC,eAEnCA,eAFmC;AAAA,MAGnCC,mBAHmC,eAGnCA,mBAHmC;AAAA,MAInCC,OAJmC,eAInCA,OAJmC;AAAA,MAKnCC,YALmC,eAKnCA,YALmC;AAAA,MAMnCC,cANmC,eAMnCA,cANmC;AAAA,MAOnCC,OAPmC,eAOnCA,OAPmC;AAStC,C,CACD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KA7CwBP,Y","sourcesContent":["import React, { Component } from 'react'\nimport Layout from '../components/Layout'\nimport Campaign from '../../ethereum/campaign'\nimport { Card } from 'semantic-ui-react'\n\nexport const getServerSideProps = async (context) => {\n  const campaignAddress = context.query.address\n  // query the data based on the address and return as props\n  const campaign = Campaign(campaignAddress)\n\n  const summary = await campaign.methods.getSummary().call()\n\n  return {\n    props: {\n      campaignAddress,\n      minimumContribution: summary[0],\n      balance: summary[0],\n      requestCount: summary[2],\n      approversCount: summary[3],\n      manager: summary[4],\n    },\n    // queried data\n  }\n}\n\nexport default function CampaignShow() {\n  const {\n    campaignAddress,\n    minimumContribution,\n    balance,\n    requestCount,\n    approversCount,\n    manager,\n  } = this.props\n}\n// export default class CampaignShow extends Component {\n//   constructor(props) {\n//     super(props)\n//   }\n\n//   renderCards() {\n//     const items = [\n//       {\n//         header: manager,\n//         meta: 'Address of Manager',\n//         description:\n//           'The manager created this campaign and can create spending/withdraw requests',\n//       },\n\n//       {\n//         header: minimumContribution,\n//         meta: 'Minimum contribution to the campaign',\n//       },\n//     ]\n//     return <Card.Group items={items} />\n//   }\n\n//   render() {\n//     return (\n//       <Layout>\n//         <h1>{this.campaignAddress} </h1>\n//         {/* Campaign Minimum: {minimumContribution}\n//         Balance: {balance}\n//         Requests: {requestCount}\n//         Approvers: {approversCount}\n//         Manager: {manager} */}\n//         {this.renderCards()}\n//       </Layout>\n//     )\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}